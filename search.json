[{"title":"<纳瓦尔宝典-埃里克·乔根森>读后感","date":"2023-06-05T13:09:59.000Z","url":"/2023/06/05/%3C%E7%BA%B3%E7%93%A6%E5%B0%94%E5%AE%9D%E5%85%B8-%E5%9F%83%E9%87%8C%E5%85%8B%C2%B7%E4%B9%94%E6%A0%B9%E6%A3%AE%3E%E8%AF%BB%E5%90%8E%E6%84%9F/","tags":[["书","/tags/%E4%B9%A6/"],["方法论","/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"],["纳瓦尔宝典","/tags/%E7%BA%B3%E7%93%A6%E5%B0%94%E5%AE%9D%E5%85%B8/"],["埃里克·乔根森","/tags/%E5%9F%83%E9%87%8C%E5%85%8B%C2%B7%E4%B9%94%E6%A0%B9%E6%A3%AE/"]],"categories":[["阅读","/categories/%E9%98%85%E8%AF%BB/"]],"content":" 这本书是在当当瞎逛看到的，买它也是因为封面的一句话，财富与幸福指南，我当时并没有详细去了解这本书，仅仅是这个标题让我起了兴趣。说实话我并不知道纳瓦尔是谁，也没想过纳瓦尔是一个人，我更关心的是这本书对财富或者幸福方面有何独特的见解，是否有触动我的观点，我能从中领悟到什么。 第一章：积累财富打工靠出卖时间换取报酬是很难致富的，做多少得多少，有一定的局限性。 开发程序、编写书籍、制作媒体等回报有可能是无限的，因为只有前期的创作成本，以后复制的成本基本为零。 用头脑赚钱，而不是时间。 从事自己感兴趣的职业，这会让你乐此不疲。 第二章：增强判断力“知道个人行为的长期后果”，这是个有意义思考，首先我的情况是边工作边学习以提升自己，我认为当自身提升到一定的程度必然会带来正向反馈，对我而言能力与收入是成正比的。 如果难以抉择，那答案一定是否定的。"},{"title":"TypeScript学习笔记","date":"2023-05-04T08:19:05.000Z","url":"/2023/05/04/TypeScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","categories":[[" ",""]],"content":"中文文档地址： 什么是TypeScriptTypeScript是JavaScript类型的超集，它可以编译成纯JavaScript。TypeScript可以在任何浏览器、任何计算机和任何操作系统上运行，并且是开源的。 使用npm安装 快速上手1、创建greeter.ts文件 2、编译TypeScript得到greeter.js文件 3、创建greeter.html 4、使用浏览器打开greeter.html 基础类型布尔值 数字 字符串 数组 元组 Tuple 枚举 Any:不清楚类型的变量 Void:没有任何类型 Null 和 Undefined Never:永不存在的值的类型 object:非原始类型 类型断言:好比其它语言里的类型转换 变量声明var 在任何函数外声明的变量为全局变量 在函数内声明的变量为局部变量,函数内可访问 在作用域内重复声明同一个变量不会报错 let 块级作用域，在花括号内可访问 在作用域内重复声明同一个变量会报错 const 块级作用域，在花括号内可访问 在作用域内重复声明同一个变量会报错 赋值后不能再改变 解构 1、用于赋值 2、用于交换值 3、用于函数参数 4、使用…语法创建剩余变量 5、解构对象 属性重命名 默认值 函数声明 展开 接口编译器会检查接口必要属性是否存在，并且类型是否一致 可选属性：编译器不会要求必须存在及类型检查 可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。 只读属性 TypeScript具有ReadonlyArray&lt;T&gt;类型，它与Array&lt;T&gt;相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改： readonly vs const 最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用const，若做为属性则使用readonly。 额外的属性检查 最佳的方式是能够添加一个字符串索引签名，前提是你能够确定这个对象可能具有某些做为特殊用途使用的额外属性。 如果 SquareConfig带有上面定义的类型的color和width属性，并且还会带有任意数量的其它属性，那么我们可以这样定义它： 函数类型 接口能够描述JavaScript中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。 可索引的类型 与使用接口描述函数类型差不多，我们也可以描述那些能够“通过索引得到”的类型 将索引签名设置为只读，这样就防止了给索引赋值： 实现接口 与C#或Java里接口的基本作用一样，TypeScript也能够用它来明确的强制一个类去符合某种契约。 类静态部分与实例部分的区别 类不能直接去实现静态部分的接口,但可以直接实现实例类型的接口 因此，我们应该直接操作类的静态部分。 继承接口 和类一样，接口也可以相互继承,也可以多继承。 混合类型 一个对象可以同时做为函数和对象使用，并带有额外的属性。 接口继承 实现SelectableControl的类必须是Control或者其子类。 类与java语法类似 继承 公共，私有与受保护的修饰符 public:公共的 private:私有的-类自身访问权限。 protected:受保护的-类自身以及子类自身访问权限。 readonly:只读- 只读属性必须在声明时或构造函数里被初始化。 存取器 直接访问 通过get&#x2F;set访问 静态属性 静态属性不需要实例化即可访问 抽象类 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。 构造函数 typeof xxx表示获取xxx类的类型，返回的是类的构造函数的类型。 把类当接口使用 函数函数类型 书写完整函数类型 推断类型 尝试这个例子的时候，你会发现如果你在赋值语句的一边指定了类型但是另一边没有类型的话，TypeScript编译器会自动识别出类型. 可选参数和默认参数 JavaScript里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是undefined。 在TypeScript里我们可以在参数名旁使用**?**实现可选参数的功能。 当参数有默认值,并且在后面 当参数有默认值,并且在前面 剩余参数 你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 this this和箭头函数 可以看到createCardPicker是个函数，并且它又返回了一个函数。 如果我们尝试运行这个程序，会发现它并没有弹出对话框而是报错了。 因为 createCardPicker返回的函数里的this被设置成了window而不是deck对象。 因为我们只是独立的调用了 cardPicker()。 顶级的非方法式调用会将 this视为window。 （注意：在严格模式下， this为undefined而不是window）。 使用ES箭头语法即可解决this绑定问题 this参数 this参数在回调函数里 … 重载 返回不同类型的值 方法是为同一个函数提供多个函数类型定义来进行函数重载。 编译器会根据这个列表去处理函数的调用。 泛型 使用泛型变量 泛型类型 泛型函数的类型与非泛型函数的类型没什么不同，只是有一个类型参数在最前面，像函数声明一样： 泛型类 泛型约束 在泛型约束中使用类型参数 在泛型里使用类类型 在TypeScript使用泛型创建工厂函数时，需要引用构造函数的类类型。 一个更高级的例子，使用原型属性推断并约束构造函数与类实例的关系。 枚举数字枚举 字符串枚举 异构枚举 计算的和常量成员 联合枚举与枚举成员的类型 运行时的枚举 反向映射 const枚举 外部枚举 … 类型推论在TypeScript中，类型推论是一种推断变量类型的机制，它可以在编译时自动推断变量的类型，而不需要显式地声明类型。在变量声明时，如果没有指定变量类型，则TypeScript会根据变量的初始值来推断变量的类型。 上卡文类型 TypeScript 中的上下文类型是指编译器根据上下文中的类型信息，推导出表达式的类型。 在上面的例子中，虽然数组元素包含 null，但是编译器推断出 x 的类型为 (number | null)[]，这是因为编译器根据上下文信息推断出数组元素应该是 number 类型或 null 类型。 需要注意的是，上下文类型只影响表达式的推断类型，不影响表达式的实际类型。因此，如果推断类型和实际类型不一致，编译器会提示类型不匹配的错误。 类型兼容性如果x要兼容y，那么y至少具有与x相同的属性。 比较两个函数 要查看x是否能赋值给y，首先看它们的参数列表。 x的每个参数必须能在y里找到对应类型的参数。 注意的是参数的名字相同与否无所谓，只看它们的类型。 这里，x的每个参数在y中都能找到对应的参数，所以允许赋值。 面来看看如何处理返回值类型，创建两个仅是返回值类型不同的函数： 类型系统强制源函数的返回值类型必须是目标函数返回值类型的子类型。 函数参数双向协变 … 可选参数及剩余参数 … 函数重载 对于有重载的函数，源函数的每个重载都要在目标函数上找到对应的函数签名。 这确保了目标函数可以在所有源函数可调用的地方调用。 枚举 枚举类型与数字类型兼容，并且数字类型与枚举类型兼容。不同枚举类型之间是不兼容的。比如， 类 类与对象字面量和接口差不多，但有一点不同：类有静态部分和实例部分的类型。 比较两个类类型的对象时，只有实例的成员会被比较。 静态成员和构造函数不在比较的范围内。 类的私有成员和受保护成员 类的私有成员和受保护成员会影响兼容性。 当检查类实例的兼容时，如果目标类型包含一个私有成员，那么源类型必须包含来自同一个类的这个私有成员。 同样地，这条规则也适用于包含受保护成员实例的类型检查。 这允许子类赋值给父类，但是不能赋值给其它有同样类型的类。 泛型 因为TypeScript是结构性的类型系统，类型参数只影响使用其做为类型一部分的结果类型。 上面代码里，x和y是兼容的，因为它们的结构使用类型参数时并没有什么不同。 把这个例子改变一下，增加一个成员，就能看出是如何工作的了： 高级主题 目前为止，我们使用了“兼容性”，它在语言规范里没有定义。 在TypeScript里，有两种兼容性：子类型和赋值。 它们的不同点在于，赋值扩展了子类型兼容性，增加了一些规则，允许和any来回赋值，以及enum和对应数字值之间的来回赋值。 语言里的不同地方分别使用了它们之中的机制。 实际上，类型兼容性是由赋值兼容性来控制的，即使在implements和extends语句也不例外。 高级类型交叉类型 交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。 联合类型 在 TypeScript 中，联合类型（Union Types）表示一个值可以是多种类型之一。使用竖线（|）分隔多个类型作为联合类型的成员。例如： 当我们使用一个联合类型的变量时，TypeScript 会自动识别变量的类型是联合类型中的一个成员类型。 类型保护与区分类型 在 TypeScript 中，有时候我们需要根据某些条件来进行类型的区分，这就需要用到类型保护。类型保护是指一些表达式，它们在运行时检查类型信息，以确保某些类型操作是安全的。常见的类型保护方式包括： typeof 类型保护 typeof 类型保护可以用来检查一个变量的类型是否为某种基本类型，比如 string、number、boolean、symbol 等。例如： instanceof 类型保护 instanceof 类型保护可以用来检查一个对象是否是某个类的实例。例如： 自定义类型保护 我们也可以自定义一些函数来进行类型保护，例如： in 类型保护 in 类型保护可以用来检查一个对象是否具有某个属性。例如： nullish 和 undefined 类型保护 在 TypeScript 中，null 和 undefined 是独立的类型，它们也可以用作类型保护。例如： 注意，按照JavaScript的语义，TypeScript会把 null和 undefined区别对待。 string | null， string | undefined和 string | undefined | null是不同的类型。 可选参数和可选属性 可选参数会被自动地加上 | undefined: 可选属性也会有同样的处理： 类型保护和类型断言 判空 如果编译器不能够去除 null或 undefined，你可以使用类型断言手动去除。 语法是添加 !后缀：identifier!从 identifier的类型里去除了 null和 undefined： 类别名 type类型别名会给一个类型起个新名字，起别名不会新建一个类型 - 它创建了一个新 名字来引用那个类型。 同接口一样，类型别名也可以是泛型 - 我们可以添加类型参数并且在别名声明的右侧传入： 我们也可以使用类型别名来在属性里引用自己： 类型别名不能出现在声明右侧的任何地方。 接口 vs. 类型别名 接口创建了一个新的名字，可以在其它任何地方使用。 类型别名并不创建新名字—比如，错误信息就不会使用别名。 在编译器中将鼠标悬停在 interfaced上，显示它返回的是 Interface，但悬停在 type上时，显示的却是对象字面量类型。 类型别名不能被 extends和 implements（自己也不能 extends和 implements其它类型）。 因为 软件中的对象应该对于扩展是开放的，但是对于修改是封闭的，你应该尽量去使用接口代替类型别名。 如果你无法通过接口来描述一个类型并且需要使用联合类型或元组类型，这时通常会使用类型别名。 字符串字面量类型 字符串字面量类型允许你指定字符串必须的固定值。 字符串字面量类型还可以用于区分函数重载： 数字字面量类型 枚举成员类型 当每个枚举成员都是用字面量初始化的时候枚举成员是具有类型的。 可辨别联合 完整性检查 … 多态的this类型 由于这个类使用了 this类型，你可以继承它，新的类可以直接使用之前的方法，不需要做任何的改变。 索引类型 编译器会检查 name是否真的是 Person的一个属性。 本例还引入了几个新的类型操作符。 首先是 keyof T，索引类型查询操作符。 对于任何类型 T， keyof T的结果为 T上已知的公共属性名的联合。 keyof Person是完全可以与 &#39;name&#39; | &#39;age&#39;互相替换的。 索引类型和字符串索引签名 keyof和 T[K]与字符串索引签名进行交互。 如果你有一个带有字符串索引签名的类型，那么 keyof T会是string。 并且 T[string]为索引签名的类型： 映射类型 TypeScript映射类型可以让你通过在已有类型上添加、修改或删除属性来创建新类型。映射类型的语法是通过在旧类型上使用keyof和in关键字来定义一个新的类型 由映射类型进行推断 … Symbols自ECMAScript 2015起，symbol成为了一种新的原生类型，就像 number和string一样。 symbol类型的值是通过Symbol构造函数创建的。 以下为这些symbols的列表： Symbol.hasInstance 方法，会被instanceof运算符调用。构造器对象用来识别一个对象是否是其实例。 Symbol.isConcatSpreadable 布尔值，表示当在一个对象上调用Array.prototype.concat时，这个对象的数组元素是否可展开。 Symbol.iterator 方法，被for-of语句调用。返回对象的默认迭代器。 Symbol.match 方法，被String.prototype.match调用。正则表达式用来匹配字符串。 Symbol.replace 方法，被String.prototype.replace调用。正则表达式用来替换字符串中匹配的子串。 Symbol.search 方法，被String.prototype.search调用。正则表达式返回被匹配部分在字符串中的索引。 Symbol.species 函数值，为一个构造函数。用来创建派生对象。 Symbol.split 方法，被String.prototype.split调用。正则表达式来用分割字符串。 Symbol.toPrimitive 方法，被ToPrimitive抽象操作调用。把对象转换为相应的原始值。 Symbol.toStringTag 方法，被内置方法Object.prototype.toString调用。返回创建对象时默认的字符串描述。 Symbol.unscopables 对象，它自己拥有的属性会被with作用域排除在外。 迭代器和生成器可迭代性 当一个对象实现了Symbol.iterator属性时，我们认为它是可迭代的。 一些内置的类型如 Array，Map，Set，String，Int32Array，Uint32Array等都已经实现了各自的Symbol.iterator。 对象上的Symbol.iterator函数负责返回供迭代的值。 for..of语句 for..of会遍历可迭代的对象，调用对象上的Symbol.iterator方法。 下面是在数组上使用 for..of的简单例子： for..of VS for..in* for..of和for..in均可迭代一个列表；但是用于迭代的值却不同，for..in迭代的是对象的 键 的列表，而for..of则迭代对象的键对应的值。 另一个区别是for..in可以操作任何对象；它提供了查看对象属性的一种方法。 但是 for..of关注于迭代对象的值。内置对象Map和Set已经实现了Symbol.iterator方法，让我们可以访问它们保存的值。 模块导出导入 任何声明（比如变量，函数，类，类型别名或接口）都能够通过添加export关键字来导出。 注意，对于导出的声明，在其他文件中使用时需要使用 import 关键字进行引入。例如，如果要在其他文件中使用上述导出的变量 myVar，可以这样引入： 导入所有并起别名 默认导出 在一个文件中只能有一个默认导出声明 export = 和 import = require() 若使用export =导出一个模块，则必须使用TypeScript的特定语法import module = require(&quot;module&quot;)来导入此模块。 生成模块代码 ts文件编译成各种js的区别 … 可选的模块加载和其它高级加载场景 … 使用其它的JavaScript库 外部模块 在Node.js里大部分工作是通过加载一个或多个模块实现的。 我们可以使用顶级的 export声明来为每个模块都定义一个.d.ts文件，但最好还是写在一个大的.d.ts文件里。 我们使用与构造一个外部命名空间相似的方法，但是这里使用 module关键字并且把名字用引号括起来，方便之后import。 例如： 现在我们可以/// &lt;reference&gt; node.d.ts并且使用import url = require(&quot;url&quot;);或import * as URL from &quot;url&quot;加载模块。 外部模块简写 简写模块里所有导出的类型将是any。 模块声明通配符 某些模块加载器如SystemJS 和 AMD支持导入非JavaScript内容。 它们通常会使用一个前缀或后缀来表示特殊的加载语法。 模块声明通配符可以用来表示这些情况。 现在你可以就导入匹配&quot;*!text&quot;或&quot;json!*&quot;的内容了。 UMD模块 有些模块被设计成兼容多个模块加载器，或者不使用模块加载器（全局变量）。 它们以 UMD模块为代表。 这些库可以通过导入的形式或全局变量的形式访问。 例如： 之后，这个库可以在某个模块里通过导入来使用： 它同样可以通过全局变量的形式使用，但只能在某个脚本（指不带有模块导入或导出的脚本文件）里。 创建模块结构指导 … 命名空间… 命名空间和模块… 模块解析… 声明合并… JSX… 装饰器… Mixins… 三斜线指令… JavaScript文件类型检查…"},{"title":"Vue3学习笔记","date":"2023-04-27T07:30:10.000Z","url":"/2023/04/27/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","tags":[["前端框架","/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"]],"categories":[["前端","/categories/%E5%89%8D%E7%AB%AF/"]],"content":"学前扯淡额...本身我会一些vue2，当时学的时候也比较心急，学的速度也比较快，所以就懂一些皮毛，能够基于element Ui写一些简单的项目。我当时觉得自己主业是java,vue对于我来说了解即可，但后面发现这种想法是不对的，前后端其实是相辅相成的，即使你后端的服务写的有多牛逼或者有多屌的创意，没法面对用户是没有意义的。随着时间的推移技术也在更新迭代，在GitHub上许多开源项目都开始用vue3了，想要看懂这些优秀的代码就得学会它。 什么是vue是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。 快速启动一个vue项目推荐的 IDE 配置是vsCode+volar插件 1、本地安装node&gt;16.0 2、安装vue 3、然后根据提示选择需要的依赖 4、切换到创建的目录 5、下载依赖 6、启动 7、编译 "},{"title":"小学英语语法笔记","date":"2023-04-12T14:23:19.000Z","url":"/2023/04/12/%E5%B0%8F%E5%AD%A6%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/","tags":[["英语","/tags/%E8%8B%B1%E8%AF%AD/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"]],"categories":[["学习英语","/categories/%E5%AD%A6%E4%B9%A0%E8%8B%B1%E8%AF%AD/"]],"content":"字母大写规则 句子首字母要大写 字母I永远要大写 人名、地名、国家名、语言名首字母都要大写 称呼语、职务名首字母要大写 表示编号的词组每个单词首字母要大写 星期、月份单词首字母要大写 常见英语字母缩写词 星 期 原型 缩写 Monday Mon. Tuesday Tue. Wednessday Wed. Friday Fri. Saturday Sat. Sunday Sun. 月 份 原型 缩写 January Jan. February Feb. March Mar. April Apr. May May. June Jun. July Jul. August Aug. September Sep. October Oct. November Nov. December Dec. 辨音元音字母：A、E、I、O、U 提示：元音字母发音不同大部分情况下取决于所在位置是开音节或闭音节 开音节 以一个元音字母结尾的重读音节 Eg: she、he、no 一个元音字母+（除r）辅音字母+ -e Eg: face、kite、cute 闭音节 以（除r&#x2F;w）辅音字母结尾 Eg; cat、bed、cut、it 元音字母 开音节 例词 闭音节 例词 a [eɪ] cake [keɪk]、late [leɪt] [æ] bad [bæd] e [iː] these [ðiːz]、we [wi:] [e] bed [bed] i [ai] five [faɪv]、kite [kaɪt] [ɪ] this [ðɪs] o [əʊ] note [nəʊt] [ɒ] knock [nɒk] u [juː] cut [kjuːt] [ʌ] cut [kʌt] C读音 在元音字母e、i前读 [s] Eg; century [ˈsentʃəri] 世纪、city [ˈsɪti] 城市 在元音字母a、o、u或者辅音前面读 [k] Eg: call [kɔːl] 打电话、come [kʌm] 来、cup [kʌp] 杯子、act [ækt] 行动 ia、ea前读 [ʃ] Eg: special [ˈspeʃ(ə)l] 特别的、ocean [ˈəʊʃ(ə)n] 海洋 S读音 在词首或双写时读 [s] Eg: start、sad、see、sillk、class、glass 在清辅音后读 [s] Eg: books、maps、desks 在浊辅音或者元音后读 [z] Eg: pens、flags、bags G读音 一般情况下读 [g] Eg: age、bag、again、get 在e、i前或者词尾-ge中读 [dʒ] Eg: gentle [ˈdʒent(ə)l] 温柔的、change 在n前有时不发音 Eg: sign、design Wh读音 在字母O前读 [h] Eg: who、whom、whose、whole 其他情况下读 [w] Eg: what、which、where、why、when 名词名词是人、事、物、地点以及抽象概念的词 名词分可数名词和不可数名词 不可数名词没有复数形式！ 可数名词单复数形式 一般情况下名词后加 -s Eg: egg-eggs、girl-girls -s&#x2F;-sh&#x2F;-x&#x2F;-ch结尾的词后面加-es 以辅音字母+ -o结尾的词后面加-es Eg: box-boxes、glass-glasses、tomato-tomatoes、potato-potatoes 特殊情况 photo-photos 以辅音字母+y结尾的词变y为-ies 以-f&#x2F;-fe结尾的词变f&#x2F;fe为-ves Eg: baby-babies、family-families、wife-eives、knife-knives 特殊情况 单数 复数 man men woman women pliceman policemen man doctor men doctors boy student boy students fish fish cheep cheep chinese chinese people people foot feet tooth teeth mouse mice child children 名词所有格 意为：······的（从属关系） Tom’s sister (汤姆的姐姐) Lily’s room (莉莉的房间) teacher’s books (老师的书) 名词-‘s 的形式规则 一般情况下名词末尾加-‘s the children’s gift 孩子们的礼物 my sister’s birthday 我姐姐的生日 以s结尾的词末尾加 -‘ the teachers’ books 老师们的书 his parents’ money 他父母的钱 Lily and lucy’s room 莉莉和露西(共有的)房间 Lily’s anf Lucy’s rooms 莉莉和露西(各自的)房间 几个人同时拥有一件东西，在最后一个人名加 -s 每个人分别拥有某物，在每个人名后加 -s 冠词泛指一类人或物中的“某一个”，相当于数词“1” 不定冠词：a、an 定冠词：the I am a teacher 我是一名老师 He has a girlfriend 他有一个女朋友 不定冠词a/am用法常考 用于固定词组搭配中 a lot of 许多的 a little (+不可数名词)、a few (+可数名词) 一些 in a word 总而言之 have a cold 感冒 have a try 尝试一次 have a good time 玩的开心 口诀：不看字母看读音不见“元音”别施“n” 以元音音素开头的单词用an，以辅音音素开头的单词用a Eg: an apple、a boy 不定冠词 the 用法常考 特指(已经提过的，都知道的) 乐器前面要用 “the” Eg: the piano、the guitar、the violin、the drum 用在世界独一无二的事物前 Eg: the earth、the sun、the moon “the + 形容词” 表示 “某一类人” Eg: the young、the old、the rich、the poor 口诀：下列情况不用冠；国家人名与语言，季节月份星期前，球类棋类与三餐，还有交通工具前 Chain、ShangHai、Mary、English Spring、April、sunday basketball 、dinner bus、car 代词人称代词是指直接指代人或者事物的代词。根据人称代词在句中所充当的成分可以分为人称代词主格与人称代词宾格。 人称代词主格在句子中充当主语，常位于句首。 人称代词宾格在句子中充当宾语，常位于谓语动词后。 我、你、他、她、它 我们、你们、他们、她们、它们 我的、你的、他的、她的、它的 我&#x2F;我们自己、你&#x2F;你们自己、他&#x2F;她&#x2F;它&#x2F;它（们）自己 人称代词：用来代替前面提到过的人或物 人称 我 你 他 她 它 我们 你们 他&#x2F;她&#x2F;它们 主格 I you he she it we you they 宾格 me you him her it us you them 物主代词：表示所有关系 人称 我的 你的 他的 她的 它的 我们的 你们的 他&#x2F;她&#x2F;它们的 形容词性 my your his her its our your their 名词性 mine your his hers its ours yours theirs 反身代词：···自己 人称 我自己 你自己 他自己 她自己 它自己 我们自己 你们自己 他&#x2F;她&#x2F;它们自己 反身代词 myself yourself himself herself itself ourselves yourselves themselves 常考点：by + 反身代词！通过自己做 不定代词：不具体制定代替任何特定名词或者形容词的代词 提示：代词本身含义、与名词单复数关系、肯定or否定 some&#x2F;any 、many&#x2F;much 、few&#x2F;a few&#x2F;little&#x2F;a little、both&#x2F;all、either&#x2F;neither 当some用于表建议的疑问句中，可以使语气变得委婉 Eg: Would you like some water? 当any用于肯定句中，意思摇身一变成“任何” Eg: You may come at any time. many+可数名词复数，much+不可数名词 ___(Many,Much) students like English. Answer :Many There is___(many,much) milk in the bottle. Answer:much few 很少（用于否定句） 可数名词 a few 一些（用于肯定句） 可数名词 little 很少（用于否定句） 不可数名词 a little 一些（用于肯定句） 不可数名词 你能看出下面句子的意思区别吗？ I have few friends here 在这里我几乎没有朋友 I have a few friends here 在这里我有些朋友 There is little water in the bottle 瓶子里几乎没有水 There is a little water in the bottle 瓶子里还有一点水 either &amp; neither either (两者中)任何一个 neither (两者中)没有一个 形容词形容词：用来描述、修饰名词或者代词的词，表示人或者事物的性质状态和特征。意为····的 通常放在所修饰的名词前面 It is a difficult problem 这是一个棘手的问题 This is an interesting book 这是一本有趣的书 a blue car 一辆蓝色的车 an empty box 一个空箱子 形容词用在系动词后面 The flowers are beautiful 这些花真漂亮 She is smart and she always gets NO.1 in the class. 他真聪明，总是在班上哪第一名 系动词是什么？ be(am、is、are、was、were)等 形容词用在不定代词之后 There is something wrong with my bike 我的自行车出了点问题 She wants to eat something sweet 她想吃点甜的东西 后可接形容词的不定代词常见的有？something、anything、nothing 形容词和副词 ···的 和 ···地 提示：形容词用来修饰名词或者代词。副词用来修饰动词，形容词或者其他副词。 副词：用来修饰动词、形容词、或其他副词。用来说明时间、地点、程度、方式等 时间副词：today、yesterday、tomorrow、now 地点副词：here、there、everywhere 程度副词：too、quite 方式副词：slowly、suddenly 副词放在那里：副词修饰动词时，通常放在动词的后面 He works hard 他努力工作 She dances very well 她跳舞跳的非常好 副词放在那里：副词修饰其他副词时，通常放在副词前面 He palys well 他表现得很好 He plays quite well 他表现得相当好 形容词 身份 修饰名词或代词 形容词 位置 名词前 形容词 位置 系动词或者不定代词后 副词 身份 修饰动词，形容词或副词 副词 位置 动词之后 副词 位置 形容词或副词之前 形容词和副词怎么选？ 分辨修饰词 形容词变副词规则 一般情况形容词+ly变副词 以 “-y” 结尾的形容词，需要把 “y” 改成 “i”，再加上后缀 “-ly”。例如：happy → happily。 一些形容词与其对应的副词形式并不完全相同。例如：fast（形容词）→ quickly（副词）；hard（形容词）→ hard（副词）。 一些形容词没有对应的副词。例如：unique、daily 等。 以下是一些常见的形容词和它们对应的副词： quick → quickly slow → slowly happy → happily sad → sadly loud → loudly quiet → quietly careful → carefully 要表示人、事物之间的比较用比较级和最高级 重难点：比较级和最高级的形式 构成方法 原级 比较级 最高级 一般情况下，词尾加-er和-est tall、greet taller、greater tallest、greatest 以发音字母-e结尾的词，词尾加-r和-st late、nice later、nicer latest、nicest 辅元音结尾的单词，双写最后辅音，加-er和-est big、hot bigger、hotter biggest、hottest 辅+y 结尾的单词，变y为i，再加-er和-est easy、happy easier 、happier easiest、happiest 两个或者两个以上的音节单词，前加more和most beautiful more beautiful most beautiful 特殊情况 原级 比较级 最高级 good、well better best bad、ill worse worst many、much more most old older(elder) oldest(eldest) far farther(further) farthest(furthest) little less least 比较级和最高级比较 比较级+then，意为比···更加··· The apple is bigger than that one. This penguin is taller than one. 三者或者三者以上的比较 ····the + 最高级，意为：最··· Yao Ming is the tallest in Chinese basketball team, 姚明在中国篮球队里最高 She is the smartest girl in the class 她是班上最聪明的女孩 比较之后，发现一样！如何用英语表示 “和···一样” 常考型：“as + 形容词&#x2F;副词原级+ as”，意为“···和···一样” I am as tall as my sister. 我和我姐姐一样高 Lily studies as hard as Lucy. Lily和Licy一样刻苦学习 介词常置于名词或代词之前，表示该词与其他成分之间的关系 at、in、on、before、after、from、behind、under、up down、 by、with、of····· 分类 例句 时间介词 at、in、on、before、after、from… 方位介词 on、in、at、behind、over、above、under、below… 方式介词 by、with、in… 动向介词 to、into、up、down、through、across… 原因介词 for… at、in、on 时间介词 at后接“黎明，午夜，点与分” at dawn、at midnight、at 5 o’clock in 接“早午晚，年月季” in the morning &#x2F; afternoon &#x2F; evening、in 2023、in July、in spring 注意：碰到night要用at，Eg：at night on 后接“星期，具体日子” on Sunday &#x2F; on April 1st on Saturday morning across“表面穿过” ，through“内部穿过” He walked across the roaf carefully. He walked through the forest alone. in the tree PK on the tree There are some apples on the tree. 树上有几个苹果 There is a bird in the tree. 树上有只鸟 提示：是否是树的一部分，是用on，不是用in 方式介词by by+交通工具“乘坐或者使用交通工具” I go to school by bus&#x2F;bike&#x2F;car I go to parking by plane&#x2F;train&#x2F;boat by+v-ing “通过做···” You can get NO.1 by working hard. 方式介词 In in+语言“用···(语言)” Can you read this book in Chinese. in+方法方式“用···(方式)” You can succeed in this way! 方式介词with with+工具 “用···(工具)” We can write with a pen with + 身体器官 We can see with our eyes. We can small with our noes. We can hear with our ears. by 交通方式&#x2F;V-ing in 语言&#x2F;方式方法(way) with 工具&#x2F;身体器官 掌握介词有几点！ 1.了解介词本身意义，根据题意选择介词！ 2.了解同类介词的区别和用法！ 3.固定介词短语搭配要积累熟记！ 动词动词的分类 分类 例句 动词 实意动词 I asked him a question、The sun rises in the east ask、rise 系动词 I am from China、That sounds interesting am、sound 情态动词 I can play the piano、May iI borrow you pen? can,May 助动词 Does he like playing football Does 实义动词有两类，及物和不及物 及物动词+名词/代词 I asked him a question. 我问了他一个问题 I wantched the film last night. 昨晚我看了这部电影 不及物动词后不可直接加名词/代词 They work in a factory. 它们在工厂工作 The sum rises in the east. 太阳从东边升起 Be动词 Be是一个家，家里有三个娃，它们是am、is、are I跟am、you跟are，is跟着它他她 This that 跟is These those we和they，后面跟着are are are 感官动词(feel、look、smell、taste、sound) 变化(become、get、true) “系动词”很柔弱，出门带随从，不是“名”就是“形” She is a beautiful girl. They are good friend. That sounds good. This bothle of milk got bad. 情态动词 can、could 能够 Can you speak in English? must 必须 Must I borrow this book with my ID card? No,you don’t have to. must 引导的疑问句，否定回答用no、you don’t have to &#x2F; need to mustn’t 表禁止 Eg：You mustn’t talk in the exam 例句 will、would 将要 I will go back home at this weekends. shall、should 应该 Shall we go? You should stay at home. may、might 也许、表请求 I may be late May I borrow your pen? 易错点：情态动词后必有动词兄弟坦诚跟随 情态动词+动词（原型） be动词 &#x2F; do &#x2F; have 帮助实义动词构成各种时态和语态 动词（一般现在时+单三式）表示事物的特征 The sky is blue. Summer in ChangSha is very hot. 表经常性的行为 常与always、often、usually、every day I often get up early every morning. He always helps others. 表示事实客观和普遍真理 The sun rises in the east. The earth goes around the sun, Knowledge is power. 语法 形式 例句 be动词的一般现在时 am、is、are I am student、We are good friends 实义动词的一般现在时 动词原形动词单三式 We play football on Sundays、He likes English very much 动词单三式变形规则 情况 形式 例句 一般情况 词尾加-s get-gets、play-plays、help-helps、look-looks 以-s -x -ch -sh -o结尾的动词 词尾加-es guess-guesses、fix-fixes、trash-teaches、wash-washes 辅音字母+y结尾的动词 变y为i加-es fly-flies、cry-cries 注意：情态动词无人称变化 Eg： She___beautiful in her new dress. Answer:looks He is 12 years old.He can___care of hims. Answer:take He always___to work by bus. Answer:goes 动词（一般过去式）动词的一般过去式表示过去某个时间发生的动作或者存在的状态 如何分辨是否要用过去时？**—看时间信号** 过去时间信号 last year、last winter、last month、last week、last night two years ago、three months ago、one hour ago yesterday、in 1994、in the old day 动词变化规则 情况 规则 例句 一般情况 词尾加-ed look-looked、want-wanted 以不发音字母e结尾的词 词尾加-d live-lived、like-liked 以辅音字母+y结尾的词 变y为i，加-ed study-studied、fly-flied 末尾只有一个辅音字母的重读闭音节动词 双写读音字母加-ed stop-stopped、plan-planned 特殊情况 意思 原型 过去式 是 am&#x2F;is was 是 are were 做 do did 有 have had 成为 become became 来 come came 去 go went 开始 begin began 坐 sit sat 给 give gave 得到 get got 买 buy bought 教 teach taught 说 say said 看见 see saw 制作 make made 感觉 feel felt 睡觉 sleep slept 保持 keep kept 花费 spend spent 跑 run ran 唱歌 sing sang 放 put put 切 cut cut 阅读 read read 让 let let 动词（一般将来时）一般将来时表示将来某一时刻的动作或者状态 将来时间信号 next+时间 “下一个” next year、next month、next week、next hour… tomorrow “明天” tomorrow morning&#x2F;afternoon&#x2F;evening… in+时间 “…时间后” in three days、in one week… 明确表示未来时间 in 2026、after school、after class 一般将来时态的构成 shall&#x2F;will + 动词原形（shall多用于第一人称I&#x2F;we） 1、表示将来某个时间将要发生的动作或状态 I&#x2F;We shall meet him at six o’clock tomorrow It will rain tomorrow 2、问多方是否愿意或表示客气的邀请 Will you please sign your name here? be going to + 动词原形（表示将来打算计划就决定要做某事） I am going to watch a movie tonight We are going to play basketball after class 用动词的适当形式填空 He will be twelve next week They will visit their teacher next sunday she will move to BeiJing in two years We shall&#x2F;will go to America next summer 选择题 1.Tom___here next month—D A.isn’t working B.doesn’t working C.isn’t going to working D.won’t work 2.He _ busy this week, but he _ free next week—A A.is,will be B.is,is C.will be, will be 3.He___in three days—C A.coming back B.comes back C.will come back D.is going to coming back 4.They___an English class this afternoon—C A.have B.will having C.are going to have 动词（现在进行时）现在进行时的构成 be + v-ing（动词分词）注意：动词随主语变化而变化 I’m doing my homework now It is raining now He is working in a company 主语 be v-ing 第一人称单数I am speaking 第三人称单数He&#x2F;She&#x2F;It is running 第二人称单数you&#x2F;各人称复数 are Listening to the class 动词大变身之“现在分词” 情况 变身 例句 一般情况 词尾加 –ing go-going、play-playing 以不发音字母e结尾的词 去e，词尾加–ing live-living、come-coming 以–ie结尾的词 变–ie为–y，再加–ing die-dying、lie-lying 末尾只有一个辅音字母的重读闭音节动词 双写辅音字母，加–ing get-getting、run-running ask-asking、study-studying、dance-dancing、write-writing、sit-sitting、tie-tying、shopping、make-making、read-reading 、buy-buying 表示此时此刻正在进行或者发生的动作常与now、right now、at the moment、at present等时间词连用 I am watching a movie now He is having a dinner with his friends at the moment listen、look Look!The baby girl is crying Listen!The bird is singing 表示一段时间或现阶段进行或发生的动作，常与these days、this week&#x2F;month等时间词连用 We are working on a farm these days he is staying at home this week 进行时表将来，表示“计划”，“安排好”即将要发生的事情 The spring is coming My uncle is leaving for BeiJing next week 练习 Look! Some bous are playing (play) basketball It is raining(rain) now He is coming(come).He is on his way now Listen! Tom is singing (sing) an English song Where is Lily? She is having (have) a dinner with her friends 陈述句与否定句什么叫陈述句？陈述句用来叙述一件事情或者表达一种看法的句子。 句末逗号，朗读降调。 He always goes to bed at 10 in the evening. I think so. 陈述句的分类有两种：肯定and否定 陈述句肯定式构成形式 1、主语+系动词+表语 This is my English teacher. It is getting dark. 系动词：be动词、感官动词、变化（become、get、turn） 表语：名词、形容词 2、主语+谓语动词+其他成分 I like staying at home at weekends. He usually plays basketball after school. 3、主语+谓语动词+表语 You are the best one. I believe you can make it. 陈述句否定式构成形式 tips：变否定要变哪？谓语动词变否定！ 谓语动词种类 否定构成 例句 be动词 be+not I am not a studentThey were not late for school yesterday 实义动词 do&#x2F;does&#x2F;did+not+实义动词原形 We do not have any moneyHe does not like shoppingI did not do my homework 情态动词、助动词 情态动词&#x2F;组动词+not You should not go back home nowI am not going to visit you tips:谓语动词是关键 一般现在时 He is at hoe now—He is not (isn’t) at home now She works in a big company—She does not (doesn’t) work in a big company 一般过去式 He was twelve years old at that time—He was not (wasn’t) twelve years old at that time He went to his uncle’s home—He did not (didn’t) go to his uncle’s home 一般将来时 They will go back to school three days later—They will not (won’t) go back to school three days later He is going to meet his old friend—He is not (isn’t) going to meet his old friend 一般现在进行时 He is talking to his friend—He is not (isn’t) talking to his friend They are having a class right now—They are not (aren’t) having a class right now is not &#x3D; isn’t、was not &#x3D; wasn’t、are not &#x3D; aren’t、were not &#x3D; weren’t、do not &#x3D; don’t、does not &#x3D; doesn’t、 did not &#x3D; didn’t、will not &#x3D; won’t、can not &#x3D; can’t 将下列句子改为否定句 My brother does his homework at school—My brother doesn’t (does not) do his homework at school I finished my homework last night—I didn’t (did not) finish my homework last night I can speak in Japanese—I can’t speak in Japanese 翻译下列句子 在晚上，我喜欢看书。我不喜欢和朋友出去—I like reading in the evening.I don’t like going outside with my friends 我不认识他—I don’t know him 现在我没有在家。我在学校。—I am not at home now.I am in the school 明年，他不会去北京—She won’t go to BeiJing next year"},{"title":"<认知驱动-周岭>读后感","date":"2023-03-29T14:18:16.000Z","url":"/2023/03/29/%3C%E8%AE%A4%E7%9F%A5%E9%A9%B1%E5%8A%A8-%E5%91%A8%E5%B2%AD%3E%E8%AF%BB%E5%90%8E%E6%84%9F/","tags":[["认知驱动","/tags/%E8%AE%A4%E7%9F%A5%E9%A9%B1%E5%8A%A8/"],["周岭","/tags/%E5%91%A8%E5%B2%AD/"],["书","/tags/%E4%B9%A6/"],["方法论","/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"]],"categories":[["阅读","/categories/%E9%98%85%E8%AF%BB/"]],"content":" 最近在读这本书，然后越发有感，想要记录书中那些让自己产生共鸣、改变认知、又或是新奇有趣的观点。早在之前就有过类似的想法，但是碍于语言组织能力比较差，不知道该从何下手。但自从开始读书后，自己的观念也在潜移默化的改变，也理解到了很多未曾想过或者完全想不到的观念。至于为什么想要看书是因为当时觉得自己总是以自身的认知去理解这个世界，认知有深浅，人生有高低。所以就觉得要用别人的角度去看世界，去发现别人眼中的美。从认为自己做不到到现在想要尝试一下，从观念上来讲就已经发生很大的变化，写的好与坏其实并不重要，重要的是去实践，就像学习新的编程技术，光看文档不使用、不总结是无法深入理解和牢固掌握的，至少我是这么认为的。 重输出，辅输入 标题是为什么我们很努力却总是看不到希望！很多时候我们都过于注重输入，特别是受鸡汤的影响，让你学这学那，让你提升自己，这也没毛病。输入固然重要，但只输入不输出那输入的成本就浪费了。而且很容易进入一个误区，即只要够努力就一定有所成就，实则不然。输入更像是投资，而输出即是产出，有产出才有可能创造价值，有价值才能得到正向反馈。 复制与转换的概念 从字面上看，复制是无限的，而转换则是从一种形态转变为另外一种形态。用不同的职业打个比方，比如短视频工作者，他们产出一个作品，面对的是无数的内容消费者。而厨师炒的一个菜只能给几个人吃。并不是说那个职业较好，大把短视频创业者创业失败负载累累的，也不少厨师混的风生水起的。这里只探讨这一现象，单纯靠转换这种形式创造价值所带来的收益是有限的，即使有那也是极少数。所以我们要清楚自己目前所处的状态，尽可能的使用复制的方式给自己带来无限的可能。 利他 人都是自私的，凡事都是优先考虑自身的利益，我觉得这也是人的本性，而利他是需要后期思想的升华才能领会得到。利他好处是挺多的，如技术开源，那样就会有更多的开发者参与进来，这会加快技术的更新迭代，创造出更好的产品。又如钢铁侠-马斯克，他开放特斯拉的所有专利，这使得汽车行业发生翻天覆地的变化。举一个我们身边的例子，如果我们在工作中不吝赐教、乐于助人的话，和同事的关系就会变得很融洽，更像是朋友一般。看似利他，实则利己。 社交是一面镜子 随着年龄的增长，社交确实少了，压力？责任？成熟？认知？或许都有吧。吃喝玩乐我相信是人都喜欢，我非圣贤自然也不例外，但更多时候我会思考它是否有意义，即是否是有效社交，这导致我显得不那么合群，我也一度怀疑自己的方式是否正确。但自己内心还是坚定的，当你足够优秀，一切都会接踵而来。 理性的局限性 自认为是一个比较理性的人，在做重要的选择时会深思熟虑，当然是基于当时的认知下。曾经有过诸多想法，但每次都是因为自身的原因而不了了之。没钱没时间这些理由似乎永远都在，蓦然回首，那不过是理性限制了你，只能感叹韶光已逝。 主动降低期待 抱有期待是乐观生活的态度，至少没有颓废。但凡事都有个度，否则物极必反。兴趣广泛不知道算不算是我的一个缺点，有太多感兴趣的事物，而且在学习的过程中总是自认为很简单、能够立刻看到成果，事实上并没有，反而因为不断的试错和无法立即得到成效导致兴趣消磨殆尽，更可怕的是什么都会一点，就是没有一样精通。 观点 检验一流智力的标准，就是看你能不能在头脑中同时保留两种相反的想法，还能维持正常行事的能力 判断事物亦是如此，凡事都有两面性，了解到越多就越能接近事实。 七年就是一辈子 有很多周期为7的事物，它确实很特别。书中所说精通一项技能大约需要7年，但在这个稍纵即逝的时代要有怎样的毅力才能坚持下去？或许这是一个很好的方法，但对于目前的我来说似乎有点不切实际。 价值交换的层次 一是只输入不输出 二是有输出无价值 三是有输出，有价值但积累不够 四是有价值，有积累但借力不够 五是如果我们自己的产出确实有价值，那么想办法让更多人知道，使更多人受益就应该成为我们的责任。 消费、生产、创造 一个产品必须是先创造后生产再消费的，而这三层关系中，创造是一切的起源，也是价值体现。而创造并非一蹴而就，我们应该尝试着去创造，有行动就一定有反馈，有反馈就能改善进而提升。也不少每个人都能有所成就，但对于提升自己来说何乐而不为。 完结 开始阅读时间是2023-3-24，阅读完时间是2023-5-22.用了2个月读一本书，看似挺慢的，放在以前我肯定要焦虑了，不过现在我会更注重质量，即我能从书中领悟到什么，或者有触动我的观点，那这本书的价值就体现出来了。"},{"title":"第一篇博客","date":"2023-03-29T13:23:00.000Z","url":"/2023/03/29/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","categories":[["日常","/categories/%E6%97%A5%E5%B8%B8/"]],"content":" 先来段开场白 在此立个flag，以后要开始写博客了！"},{"title":"categories","date":"2023-03-29T12:58:12.000Z","url":"/categories/index.html","categories":[[" ",""]]},{"title":"search","date":"2023-03-29T12:02:09.000Z","url":"/search/index.html","categories":[[" ",""]]}]